set nocompatible        "非兼容vi模式,避免以前版本的一些bug和局限  即使用扩展功能

"---------------插件配置------------------"
filetype off 
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'
Bundle 'tpope/vim-fugitive'

filetype plugin indent on
"-------------------插件配置End---------------------------------"


set nu              "显示行数
set encoding=utf-8
"set background=dark        "黑色背景
autocmd InsertLeave * se nocul  " 用浅色高亮当前行  
autocmd InsertEnter * se cul    " 用浅色高亮当前行  

set hls                 "匹配高亮
set autoindent          "自动对齐
set smartindent         "自动选择对齐方式
"set autochdir          "设置打开文件目录为工作目录

set incsearch           "一边输入一边自动搜索
set showmatch           "括号自动匹配 输入括号时高亮显示匹配括号

set expandtab " 把tab转换成空格
set tabstop=4 " 空格数量是4
set bs=2
set shiftwidth=4 " 自动缩进的宽度
set sts=4 

highlight Pmenu    ctermbg=blue  ctermfg=red
highlight PmenuSel ctermbg=green ctermfg=black

syntax on




"代码补全  
"set completeopt=preview,menu 
set completeopt=longest,menu    "动态补全

"TAB 键前面没有单词就正常TAB否则就是C-N
let s:completions = []
function! SmartComplete ()
    let cursorpos = getpos('.')
    let cursorcol = cursorpos[2]
    let curr_line = getline('.')
    let curr_pos_pat = '\%' . cursorcol . 'c'

    if curr_line =~ '^\s*' . curr_pos_pat
        return "\<TAB>"
    endif
    let cursor_back = "\<C-O>:call setpos('.'," . string(cursorpos) . ")\<CR>"
    for [left, right, completion, restore] in s:completions
        let pattern = left . curr_pos_pat . right
        if curr_line =~ pattern
            if cursorcol == strlen(curr_line)+1 && strlen(completion)==1
                let cursor_back = "\<LEFT>"
            endif
            return completion . (restore ? cursor_back : "")
        endif
    endfor
    if curr_line =~ '\k' . curr_pos_pat
        return "\<C-N>"
    else
        return "\<TAB>"
    endif
endfunction

:inoremap <silent> <TAB>   <C-R>=SmartComplete()<CR>
":inoremap <Tab> <C-n>
""""""""""""""""""""""""""""""""""""""""""




"""""""""""""""""""""""""""""""""""""""""""""
""备忘录
"set relativenumber     "相对行号，可用Ctrl+n在相对/绝对行号间切换
"可以使用y33gg   命令/行号/gg  实现  v32gg 

"增加缩进,"x>"表示增加以下x行的缩进
" ''此命令相当有用, 它移动光标到上一个标记处, 比如用 gd, * 等查找到某个单词后, 再输入此命令则回到上次停留的位置.
" '. 此命令相当好使, 它移动光标到上一次的修改行.
"<C-O>            : 依次沿着你的跳转记录向回跳 (从最近的一次开始)
"<C-I>            : 依次沿着你的跳转记录向前跳
":ju(mps)         : 列出你跳转的足迹"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"if has("autocmd")
"   autocmd FileType javascript setlocal ts=4 sts=4 sw=4 expandtab
"   autocmd FileType python setlocal ts=4 sts=4 sw=4 expandtab
"   autocmd FileType html setlocal ts=4 sts=4 sw=4 expandtab
"endif

au BufNewFile,BufRead *.c set filetype=lpc
"set laststatus=2      " 总是显示状态栏
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%] "显示文件名：总行数，总的字符数  
"set ruler "在编辑过程中，在右下角显示光标位置的状态行  

"定位到上一次 开打文件的位置
if has("autocmd")
    au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"=========ctags设置======================"
nmap <C-]> g<C-]>
set tags=tags;\







